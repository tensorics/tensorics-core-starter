project.ext.getDeploymentVersion = {
    String tmpDeploymentVersion = VCS_TAG.replaceFirst("v", "");
    if (!tmpDeploymentVersion.matches("\\d+\\.\\d+\\.\\d+")) {
        throw new RuntimeException("Version is not valid. Correct format is like 1.0.2 but was " + tmpDeploymentVersion)
    }
    return tmpDeploymentVersion;
}

bintrayUpload.doFirst {
    println "Deploying version ${getDeploymentVersion()} from vscTag ${VCS_TAG}"
}

bintray {
    user = "${BINTRAY.userName}"
    key = "${BINTRAY.apiToken}"

    publications = ['nebula']
    // When uploading Maven-based publication files. Nebula is because we're using the netflix plugins and they use nebula as default name for a publication
    dryRun = !DEPLOYMENT // Whether to run this as dry-run, without deploying
    publish = DEPLOYMENT // Whether version should be auto published after an upload
    override = false // Whether to override version artifacts already published

    pkg {
        repo = "${BINTRAY.repo}"
        name = "${BINTRAY.name}"
        userOrg = "${BINTRAY.organization}"
        websiteUrl = "${INFO.github}"
        issueTrackerUrl = "${INFO.githubIssues}"
        vcsUrl = "${INFO.repo}"
        licenses = ['Apache-2.0']

        version {
            name = getDeploymentVersion()
            released = new Date()
            vcsTag = VCS_TAG
            gpg { sign = true }
        }
    }
}

def pomExtraInfo = {
    url INFO.url
    scm {
        connection "scm:git:${INFO.repo}"
        developerConnection "scm:git:${INFO.repo}"
        url "${INFO.repo}"
    }
    licenses {
        license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }
    developers {
        POM.developers.each { dev ->
            developer {
                id dev.id
                name dev.name
                email dev.email
            }
        }
    }
}

publishing {
    publications {
        nebula(MavenPublication) {
            groupId POM.groupId
            artifactId POM.artifactId
            version getDeploymentVersion()

            description POM.description

            artifact sourcesJar
            artifact javadocJar

            pom.withXml { asNode().children().last() + pomExtraInfo }
        }
    }
}
