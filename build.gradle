buildscript {
    project.ext.CERN_VM = System.getProperty('CERN_TECHNET_VM') ?: System.getenv('CERN_TECHNET_VM') ?: false
    project.ext.TRAVIS_CI = System.getProperty('TRAVIS') ?: System.getenv('TRAVIS') ?: false
    project.ext.DEPLOYMENT = System.getProperty('deployment') ?: false
    project.ext.VCS_TAG = System.getProperty('TRAVIS_TAG') ?: System.getenv('TRAVIS_TAG')
    project.ext.POM = [
        groupId    : 'org.tensorics',
        artifactId : 'tensorics-core-starter',
        description: 'Tensorics is a java framework which uses a tensor as a central object. A tensor represents a set of values placed in an N-dimensional space. Wherever you are tempted to use maps of maps, a tensor might be a good choice ;-) Tensorics provides methods to create, transform and performing calculations with those tensors.',
        developers : [
            [
                id   : 'kaifox',
                name : 'Kajetan Fuchsberger',
                email: 'kajetan.fuchsberger@gmail.com'
            ],
            [
                id   : 'agorzawski',
                name : 'Arek Gorzawski',
                email: 'agorzawski@gmail.com'
            ],
            [
                id   : 'michi42',
                name : 'Michi Hostettler',
                email: 'michi.hostettler@cern.ch'
            ],
            [
                id   : 'andreacalia',
                name : 'Andrea Calia',
                email: 'andrea.calia.46@gmail.com'
            ]
        ]]
    project.ext.INFO = [
        repo        : 'https://github.com/tensorics/tensorics-core-starter.git',
        url         : 'http://tensorics.org/',
        github      : 'https://github.com/tensorics/tensorics-core-starter',
        githubIssues: 'https://github.com/tensorics/tensorics-core-starter/issues'
    ]
    project.ext.BINTRAY = [
        repo        : 'tensorics-repo',
        name        : 'org.tensorics:tensorics-core-starter',
        organization: 'tensorics',
        userName    : 'tensorics-dev',
        apiToken    : System.getenv('BINTRAY_API_TOKEN')
    ]

    repositories {
        if (CERN_VM) {
            maven { url 'http://artifactory.cern.ch/gradle-plugins' }
            maven { url 'http://artifactory.cern.ch/ds-jcenter' }
            maven { url 'http://artifactory.cern.ch/development' }
        } else {
            mavenCentral()
            jcenter()
        }
    }
    dependencies {
        classpath 'com.netflix.nebula:nebula-publishing-plugin:5.1.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'idea'
apply plugin: 'eclipse'

repositories {
    if (CERN_VM) {
        maven { url 'http://artifactory.cern.ch/ds-jcenter' }
        maven { url 'http://artifactory.cern.ch/development' }
    } else {
        mavenCentral()
        jcenter()
    }
}

if (DEPLOYMENT) {
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'nebula.maven-publish'
    apply plugin: 'com.jfrog.bintray'

    println 'Applying deployment scripts'
    apply from: './scripts/bintray-deploy.gradle'
}

group 'org.tensorics'

sourceCompatibility = JavaVersion.VERSION_1_8

dependencies {
    compile 'org.tensorics:tensorics-core:0.+'
    compile (group: 'org.springframework.boot', name: 'spring-boot-starter', version: '2.1.0.RELEASE') { exclude module: "spring-boot-starter-logging" }
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.1.0.RELEASE'
}

sourceSets {
    main {
        java { srcDir 'src/java' }
        resources { srcDir 'src/resources' }
    }
}

javadoc { options.encoding = "UTF-8" }

task wrapper(type: Wrapper) { gradleVersion = '4.8.1' }

if(!project.tasks.findByName("javadocJar")) {
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }
}

if(!project.tasks.findByName("sourcesJar")) {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

artifacts { archives javadocJar, sourcesJar }

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination new File("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        csv.enabled false
    }
}

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
